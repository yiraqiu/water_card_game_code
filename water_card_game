from random import shuffle


def get_user_input(question):
    """
    Prompt the user for input and process it as per the instructions.
    """
    while True:
        user_input = input(question).strip()
        if user_input:
            if user_input.isdigit():
                return int(user_input)
            elif user_input.upper() in ["SOH", "DOT", "DMT"]:
                return user_input.upper()
            return user_input.lower()
        print("Invalid input. Please try again.")


def setup_water_cards():
    """
    Create and shuffle a list of water cards.
    """
    water_cards = [1] * 30 + [5] * 15 + [10] * 8
    shuffle(water_cards)
    return water_cards




def setup_power_cards():
    """
    Create and shuffle a list of power cards.
    """
    power_cards = ["SOH"] * 10 + ["DOT"] * 2 + ["DMT"] * 3
    shuffle(power_cards)
    return power_cards

def setup_cards():
    """
    Setup both the water and power card piles.
    """
    return setup_water_cards(), setup_power_cards()

def get_card_from_pile(pile, index):
    """
    Remove and return a card from a specified pile at a given index.
    """
    return pile.pop(index)

def arrange_cards(cards_list):
    """
    Arrange cards: first three as sorted water cards and last two as sorted power cards.
    """
    water_cards = sorted([card for card in cards_list if isinstance(card, int)])
    power_cards = sorted([card for card in cards_list if isinstance(card, str)])
    cards_list[:] = water_cards + power_cards

def deal_cards(water_cards_pile, power_cards_pile):
    """
    Deal 3 water cards and 2 power cards to two players.
    """
    player1_cards = []
    player2_cards = []

    # Alternate dealing: 3 water cards
    for _ in range(3):
        player1_cards.append(get_card_from_pile(water_cards_pile, 0))
        player2_cards.append(get_card_from_pile(water_cards_pile, 0))

    # Alternate dealing: 2 power cards
    for _ in range(2):
        player1_cards.append(get_card_from_pile(power_cards_pile, 0))
        player2_cards.append(get_card_from_pile(power_cards_pile, 0))

    # Arrange cards for both players
    arrange_cards(player1_cards)
    arrange_cards(player2_cards)

    return player1_cards, player2_cards

def apply_overflow(tank_level):
    max_fill = 80
    if tank_level > max_fill:
        tank_level = max_fill - (tank_level - max_fill)
    return max(0, min(tank_level, 80))  # Clamp between 0 and 80

def use_card(player_tank, card_to_use, player_cards, opponent_tank):
    if card_to_use not in player_cards:
        raise ValueError("Card not in player's hand")
    player_cards.remove(card_to_use)
    
    # Handle water card (integer)
    if isinstance(card_to_use, int):
        player_tank += card_to_use
    # Handle power card (string)
    elif isinstance(card_to_use, str):
        if card_to_use == "DMT":
            player_tank *= 2
        elif card_to_use == "SOH":
            stolen = opponent_tank // 2
            opponent_tank -= stolen
            player_tank += stolen
        elif card_to_use == "DOT":
            opponent_tank = 0
    
    # Apply overflow
    player_tank = apply_overflow(player_tank)
    opponent_tank = max(0, opponent_tank)  # Prevent negative tanks
    
    return (player_tank, opponent_tank)

def filled_tank(tank):
    """
    Check if the tank is filled.
    """
    return 75 <= tank <= 80

def check_pile(pile, pile_type):
    if not pile:
        if pile_type == "water":
            new_pile = setup_water_cards()
        elif pile_type == "power":
            new_pile = setup_power_cards()
        else:
            raise ValueError("Invalid pile type")
        pile[:] = new_pile

def discard_card(card, player_cards, water_pile, power_pile):
    if card in player_cards:
        player_cards.remove(card)
        if isinstance(card, int):
            water_pile.append(card)
        else:
            power_pile.append(card)

# TODO: Implement human_play, computer_play, and game flow in main()
def human_play(human_tank, human_cards, water_cards_pile, power_cards_pile, opponent_tank):
    print(f"\n=== Human Player's turn ===")
    print(f"Your water level is at: {human_tank}")
    print(f"Computer's water level is at: {opponent_tank}")
    print("Your cards are:", human_cards)
    
    # Get action choice
    action = get_user_input("Do you want to use a card or discard a card? (u/d): ")
    while action not in ["u", "d"]:
        print("Invalid action. Choose 'u' or 'd'.")
        action = get_user_input("Do you want to use a card or discard a card? (u/d): ")
    
    action = "use" if action == "u" else "discard"
    
    # Get card choice
    card_prompt = "Which card do you want to use? " if action == "use" else "Which card do you want to discard? "
    card = get_user_input(card_prompt)
    while card not in human_cards:
        print("Invalid card. Choose from your hand.")
        card = get_user_input(card_prompt)
    
    if action == "use":
        print(f"Using card: {card}")
        human_tank, opponent_tank = use_card(human_tank, card, human_cards, opponent_tank)
    else:
        print(f"Discarding card: {card}")
        discard_card(card, human_cards, water_cards_pile, power_cards_pile)
    
    # Draw new card and handle pile check
    if isinstance(card, int):
        check_pile(water_cards_pile, "water")
        new_card = get_card_from_pile(water_cards_pile, 0)
        card_type = "water"
    else:
        check_pile(power_cards_pile, "power")
        new_card = get_card_from_pile(power_cards_pile, 0)
        card_type = "power"
    
    human_cards.append(new_card)
    arrange_cards(human_cards)
    print(f"Drawing {card_type} card: {new_card}")
    print("Your cards are now:", human_cards)
    return (human_tank, opponent_tank)


def human_play(human_tank, human_cards, water_cards_pile, power_cards_pile, opponent_tank):
    print(f"Your water level is at: {human_tank}")
    print(f"Computer's water level is at: {opponent_tank}")
    print(f"Your cards are: {human_cards}")

    while True:
        answer = get_user_input("Do you want to use a card or discard a card? (u / d): ")
        if answer == "u":
            while True:
                card = get_user_input("Which card do you want to use?: ")
                if card in human_cards: break
            print(f"Playing with card: {card}")
            human_tank_update, computer_tank_update = use_card(human_tank, card, human_cards, opponent_tank)
            break
        elif answer == "d":
            while True:
                card = get_user_input("Which card do you want to discard?: ")
                if card in human_cards: break
            print(f"Discarding card: {card}")
            discard_card(card, human_cards, water_cards_pile, power_cards_pile)
            human_tank_update, computer_tank_update = human_tank, opponent_tank
            break

    human_tank_update = apply_overflow(human_tank_update)

    if isinstance(card, int):
        new = get_card_from_pile(water_cards_pile, 0)
        print(f"Drawing water card: {new}")
    else:
        new = get_card_from_pile(power_cards_pile, 0)
        print(f"Drawing power card: {new}")

    human_cards.append(new)
    arrange_cards(human_cards)

    print(f"Your water level is now at: {human_tank_update}")
    print(f"Computer's water level is now at: {computer_tank_update}")
    print(f"Your cards are now: {human_cards}")

    return (human_tank_update, computer_tank_update)



def computer_play(computer_tank, computer_cards, water_cards_pile, power_cards_pile, opponent_tank):
    """
    Simulates the computer player's turn with an improved strategy to prioritize winning moves.
    """
    print("\n=== Computer Player's turn ===")
    print(f"Computer's water level is at:  {computer_tank}")
    print(f"Your water level is at:  {opponent_tank}")

    # Phase 1: Check for any card that can immediately fill the tank
    chosen_card = None
    for card in computer_cards:
        new_self = computer_tank
        if isinstance(card, int):
            new_self = apply_overflow(computer_tank + card)
        elif card == "DMT":
            new_self = apply_overflow(computer_tank * 2)
        elif card == "SOH":
            stolen = opponent_tank // 2
            new_self = apply_overflow(computer_tank + stolen)
        elif card == "DOT":
            continue  # DOT doesn't affect own tank

        if 75 <= new_self <= 80:
            chosen_card = card
            break  # Use the first card that fills the tank

    if chosen_card:
        # Apply the chosen card's effect
        computer_cards.remove(chosen_card)
        if isinstance(chosen_card, int):
            computer_tank = apply_overflow(computer_tank + chosen_card)
            print(f"Computer playing with card:  {chosen_card}")
        elif chosen_card == "DMT":
            computer_tank = apply_overflow(computer_tank * 2)
            print("Computer playing with card:  DMT")
        elif chosen_card == "SOH":
            stolen = opponent_tank // 2
            computer_tank = apply_overflow(computer_tank + stolen)
            opponent_tank -= stolen
            print("Computer playing with card:  SOH")
        elif chosen_card == "DOT":
            opponent_tank = 0
            print("Computer playing with card:  DOT")
    else:
        # Phase 2: No immediate win found; select based on maximum gain
        potential_gains = []
        for card in computer_cards:
            new_self = computer_tank
            new_opponent = opponent_tank
            if isinstance(card, int):
                new_self = apply_overflow(computer_tank + card)
            elif card == "DMT":
                new_self = apply_overflow(computer_tank * 2)
            elif card == "SOH":
                stolen = opponent_tank // 2
                new_self = apply_overflow(computer_tank + stolen)
                new_opponent = opponent_tank - stolen
            elif card == "DOT":
                new_opponent = 0
            gain = (new_self - computer_tank) + (opponent_tank - new_opponent)
            potential_gains.append((gain, card, new_self, new_opponent))

        if potential_gains:
            potential_gains.sort(reverse=True, key=lambda x: x[0])
            best_gain, best_card, new_self, new_opponent = potential_gains[0]
            if best_gain > 0:
                # Use the best card
                computer_cards.remove(best_card)
                computer_tank = new_self
                opponent_tank = new_opponent
                print(f"Computer playing with card:  {best_card}")
            else:
                # Discard the least useful card
                water_cards = [c for c in computer_cards if isinstance(c, int)]
                discard = min(water_cards) if water_cards else computer_cards[-1]
                computer_cards.remove(discard)
                if isinstance(discard, int):
                    water_cards_pile.append(discard)
                else:
                    power_cards_pile.append(discard)
                print(f"Computer discarding card:  {discard}")
        else:
            # Fallback discard if no cards (shouldn't happen)
            discard = computer_cards[0]
            computer_cards.remove(discard)
            if isinstance(discard, int):
                water_cards_pile.append(discard)
            else:
                power_cards_pile.append(discard)
            print(f"Computer discarding card:  {discard}")

    # Draw new card and handle pile replenishment
    if chosen_card or (potential_gains and best_gain > 0):
        card_type = "water" if isinstance(chosen_card if chosen_card else best_card, int) else "power"
    else:
        card_type = "water" if isinstance(discard, int) else "power"

    pile = water_cards_pile if card_type == "water" else power_cards_pile
    check_pile(pile, card_type)
    new_card = get_card_from_pile(pile, 0)
    computer_cards.append(new_card)
    arrange_cards(computer_cards)

    print(f"Computer's water level is now at:  {computer_tank}")
    print(f"Your water level is now at:  {opponent_tank}")
    return (computer_tank, opponent_tank)
def main():
    # Welcome message
    print("Welcome to the WATER TANK game! Play against the computer!")
    print("Fill your tank by using or discarding a card for each turn.")
    print("The first player to fill their tank wins the game.")
    print("Good luck!\n")
    print("The Human Player has been selected to go first.")
    
	# Initial setup
    water_cards_pile = setup_water_cards()  
    power_cards_pile = setup_power_cards()
    human_tank, computer_tank = 0, 0  # Starting tank levels
    human_cards, computer_cards = deal_cards(water_cards_pile, power_cards_pile)
    turn = 'human'
    
    # Main game loop
    while True:  #
            
        if turn == 'human':
            human_tank, computer_tank = human_play(human_tank, human_cards, water_cards_pile, power_cards_pile, computer_tank)
            turn = 'computer'  # Switch turn
            print()
        else:
            computer_tank, human_tank = computer_play(computer_tank, computer_cards, water_cards_pile, power_cards_pile, human_tank)
            turn = 'human'  # Switch turn
            print()
        
        check_pile(water_cards_pile, "water") 
        check_pile(power_cards_pile, "power")
        

        if filled_tank(human_tank) or filled_tank(computer_tank):
            break

    # Determine winner
    if human_tank > computer_tank:
        print("Human wins!")
    else:
        print("Computer wins!")

if __name__ == '__main__':
    main()
